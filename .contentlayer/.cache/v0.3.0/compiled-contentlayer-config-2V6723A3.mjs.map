{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport readingTime from \"reading-time\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeCodeTitles from \"rehype-code-titles\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypePrism from \"rehype-prism-plus\";\nimport GitHubSlugger from \"github-slugger\";\nconst headersRegex = /(#{1,6})\\s+(.+)/g;\n\nconst computedFields = {\n readingTime: { type: \"json\", resolve: (doc) => readingTime(doc.body.raw) },\n wordCount: {\n  type: \"number\",\n  resolve: (doc) => doc.body.raw.split(/\\s+/gu).length,\n },\n slug: {\n  type: \"string\",\n  resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n },\n};\n\nconst Blog = defineDocumentType(() => ({\n name: \"Blog\",\n filePathPattern: \"blog/*.mdx\",\n contentType: \"mdx\",\n fields: {\n  title: { type: \"string\", required: true },\n  publishedAt: { type: \"string\", required: true },\n  author: { type: \"string\", required: true },\n  summary: { type: \"string\", required: true },\n  image: { type: \"string\", required: false },\n },\n computedFields: {\n  ...computedFields,\n  headings: {\n   type: \"list\",\n   of: { type: \"string\" },\n   resolve: (doc) => {\n    const slugger = new GitHubSlugger();\n    const headings = Array.from(doc.body.raw.matchAll(headersRegex))\n     .map((value) => ({\n      size: value[1].length,\n      content: value[2],\n      slug: slugger.slug(value[2]),\n     }))\n     .filter(({ size }) => size <= 3);\n    return headings;\n   },\n  },\n  structuredData: {\n   type: \"object\",\n   resolve: (doc) => ({\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BlogPosting\",\n    headline: doc.title,\n    datePublished: doc.publishedAt,\n    dateModified: doc.publishedAt,\n    description: doc.summary,\n    image: doc.image ? \"https://igorkowalczyk.dev/${doc.image}\" : \"https://igorkowalczyk.dev/assets/banner.png\",\n    url: `https://igorkowalczyk.dev/blog/${doc._raw.flattenedPath}`,\n    author: {\n     \"@type\": \"Person\",\n     name: doc.author,\n    },\n   }),\n  },\n },\n}));\n\nconst OtherPage = defineDocumentType(() => ({\n name: \"OtherPage\",\n filePathPattern: \"*.mdx\",\n contentType: \"mdx\",\n fields: {\n  title: { type: \"string\", required: true },\n  description: { type: \"string\", required: false },\n },\n computedFields,\n}));\n\nconst contentLayerConfig = makeSource({\n contentDirPath: \"data\",\n documentTypes: [Blog, OtherPage],\n mdx: {\n  remarkPlugins: [remarkGfm],\n  rehypePlugins: [\n   rehypeSlug,\n   rehypeCodeTitles,\n   rehypePrism,\n   [\n    rehypeAutolinkHeadings,\n    {\n     properties: {\n      className: [\"anchor\"],\n     },\n    },\n   ],\n  ],\n },\n});\n\nexport default contentLayerConfig;\n"],
  "mappings": "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",
  "names": []
}
